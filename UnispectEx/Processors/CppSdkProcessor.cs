using System.Collections.Generic;
using System.IO;

using UnispectEx.Core.Inspector;
using UnispectEx.Core.Util;

namespace UnispectEx.Processors; 

internal class CppSdkProcessor : IDumpProcessor {
    public bool Initialize(IEnumerable<MetadataContainer> metadataContainers) {
        _metadataContainers = metadataContainers;

        return true;
    }

    public bool Serialize(IDumpSerializer serializer) {
        foreach (var container in _metadataContainers!) {
            if (!container.Export)
                continue;

            using var stream = new MemoryStream();
            using var writer = new StreamWriter(stream);

            writer.WriteLine("// *** GENERATED BY https://github.com/coconutbird/UnispectEx ***");

            if (!serializer.Serialize(writer, container))
                return false;
            
            writer.Flush();

            var folderParts = container.Namespace.Split('.');

            for (var i = 0; i < folderParts.Length; ++i)
                folderParts[i] = Helpers.ToSnakeCase(folderParts[i]);

            _serializedFiles.Add(new(
                container,
                Path.Join(folderParts),
                $"{Helpers.ToSnakeCase(container.Name)}.hpp",
                stream.ToArray()));
        }

        return true;
    }

    public bool Write(string outputDirectory) {
        using var stream = new MemoryStream();
        using var writer = new StreamWriter(stream);

        var headerName = $"SDK_SDK_HPP";

        writer.WriteLine($"#ifndef {headerName}");
        writer.WriteLine($"#define {headerName}");

        var enumPaths = new List<string>();
        var otherPaths = new List<string>();

        var rootDirectory = Path.Join(outputDirectory, "sdk");

        foreach (var file in _serializedFiles) {
            var directory = Path.Join(rootDirectory, "sdk", file.Directory);

            if (!Directory.Exists(directory))
                Directory.CreateDirectory(directory);

            if (file.Container.TypeDef.IsEnum)
                enumPaths.Add(Path.Join("sdk", file.Directory, file.Name));
            else
                otherPaths.Add(Path.Join("sdk", file.Directory, file.Name));

            File.WriteAllBytes(Path.Join(directory, file.Name), file.Content);
        }

        writer.WriteLine("// enums");

        foreach (var path in enumPaths)
            writer.WriteLine($"#include \"{path}\"");

        writer.WriteLine("// other");

        foreach (var path in otherPaths)
            writer.WriteLine($"#include \"{path}\"");

        writer.WriteLine($"#endif // {headerName}");
        writer.Flush();

        File.WriteAllBytes(Path.Join(rootDirectory, "sdk.hpp"), stream.ToArray());

        return true;
    }

    private class SerializedFile {
        internal SerializedFile(MetadataContainer container, string directory, string name, byte[] content) {
            Container = container;
            Directory = directory;
            Name = name;
            Content = content;
        }

        internal MetadataContainer Container { get; }
        internal string Directory { get; }
        internal string Name { get; }
        internal byte[] Content { get; }
    }

    private IEnumerable<MetadataContainer>? _metadataContainers;
    private readonly List<SerializedFile> _serializedFiles = new();
}